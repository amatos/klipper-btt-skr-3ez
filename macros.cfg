# WARNING. DO NOT EDIT THIS FILE.
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

# share variables between macros
# can be accessed via {printer["gcode_macro SHARE_VARIABLES"].VARIABLE_NAME}
# can be set with SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=VARIABLE_NAME VALUE=NEW_VALUE
[gcode_macro SHARE_VARIABLES]
variable_enable_save_config : False
variable_dim_enclosure_led : False
gcode:

[gcode_macro MIN_TEMP_CHECK]
description:Min Temp Check
variable_parameter_MIN_TEMP: 250
gcode:
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            PLAY_LONG_FEEDBACK_SOUND
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={printer.extruder.target|float - 5} MAXIMUM={printer.extruder.target|float + 5}
        {% endif %}
    {% else %} # if no setpoint for extruder, set default value to 250
        PLAY_LONG_FEEDBACK_SOUND
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.MIN_TEMP|default(250)|float}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.MIN_TEMP|default(250)|float - 5} MAXIMUM={params.MIN_TEMP|default(250)|float + 5}
    {% endif %}
    PLAY_DOUBLE_FEEDBACK_SOUND

# START_PRINT EXTRUDER_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0} AREA_START=%MINX%,%MINY% AREA_END=%MAXX%,%MAXY% FILAMENT_TYPE={material_type}
[gcode_macro START_PRINT]
variable_parameter_EXTRUDER_TEMP: 190
variable_parameter_BED_TEMP: 60
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
variable_parameter_FILAMENT_TYPE : "PLA"
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=0 ; clear idle_timeout
    HEAT_SOAK ACTION=STOP
    CLEAR_PAUSE
    M220 S100 ; reset feedrate
    ; SET_FAN_SPEED FAN=bed_fan SPEED=0.0 ; turn off bed fan

    PRINT MSG="Homing..."
    SENSORLESS_HOME_X
    SENSORLESS_HOME_Y
    PRINT MSG="Aligning Z..."
    ; G34 ; level gantry

    ; Absolute Positioning
    G90
    G0 X90 Y90 Z100 F3000
    ; turn on part fan to cooldown the probe
    M106 S255

    ; SET_FAN_SPEED FAN=filter_fan SPEED=0.5 ; filter fan slow mode


    ;PRINT MSG="Waiting for temperature"
    PRINT MSG="Waiting for bed temp"

    ; preheat nozzle
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150

    ; set temp and wait for bed
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|default(60)|float}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.BED_TEMP|default(60)|float - 5} MAXIMUM={params.BED_TEMP|default(60)|float + 5}

    ; part fan off
    M106 S0

    ; then set print nozzle temp and wait
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|default(200)|float}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(200)|float - 5} MAXIMUM={params.EXTRUDER_TEMP|default(200)|float + 5}

    PLAY_SINGLE_FEEDBACK_SOUND

    PRINT MSG="Aligning Z..."
    ; G34 ; level gantry

    PRINT MSG="Homing Z..."
    G28 Z ;re-home Z

    ; PROBE_TEMPERATURE_COMPENSATION ACTION=APPLY

    ;SET_GCODE_OFFSET Z=0.525
    # BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    BED_MESH_CALIBRATE
    ;BED_MESH_PROFILE LOAD="default"

    FILAMENT_PROFILE FILAMENT_TYPE={params.FILAMENT_TYPE|default("DEFAULT")}

    ; start print job
    PLAY_DOUBLE_FEEDBACK_SOUND

    G0 X0 Y-4 F3000 ; move outside print area
    G1 Z10 F1000 ;lower Z
    PRINT MSG="Waiting for nozzle temp"
    ; then set print nozzle temp and wait
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|default(200)|float}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(200)|float - 5} MAXIMUM={params.EXTRUDER_TEMP|default(200)|float + 5}
    PRINT MSG="Prime Line"
    G92 E0 ;Reset Extruder
    G1 Z0.6 F1000 ;lower nozzle
    G1 E5 F300 ; extrude a smal blob
    G92 E0 ;Reset Extruder
    G1 Z0.4 F1000
    G1 X85 E20 F1000 ;Draw the first line
    G92 E0 ;Reset Extruder
    G1 Z0.2 F1000
    G1 X95 F3000 ;Move to side a little
    G1 X140 E10 F500 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 E1 F300 ; extrude a smal blob
    G1 X250 F500
    G92 E0 ;Reset Extruder
    G1 Z2.0 F1000 ;Move Z Axis up

    ;M221 S93 ; Tunned flow
    PRINT MSG="{printer.print_stats.filename}"

[gcode_macro END_PRINT]
gcode:
    M220 S100 ; reset to default speed
    G91 ; relative
    G1 E-2 F300
    {% if printer.toolhead.position.z <= 150 %}
        G90
        G0 Z150 F3000
    {% else %}
        G91
        G0 Z5 F3000
    {% endif %}
    G90 ; absolute pos
    G1 X0 Y210 F3000

    PRINT MSG="Done printing!"
    PLAY_LONG_FEEDBACK_SOUND

    ; PROBE_TEMPERATURE_COMPENSATION ACTION=CLEAR

    CLEAR_PAUSE
    TURN_OFF_HEATERS ; heaters off
    ;M84 ; disable steppers
    M107 ; fan off
    BED_MESH_CLEAR
    ; SET_FAN_SPEED FAN=filter_fan SPEED=1.0 ; filter fan max speed
    ; check if saving is needed
    AUTO_SAVE_CONFIG

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_OLD
gcode:
    M220 S100 ; reset to default speed
    G91 ; relative
    G1 E-2 F300 ; retract
    {% if printer.toolhead.position.z <= 150 %}
        G90
        G0 Z150 F3000
    {% else %}
        G91
        G0 Z5 F3000
    {% endif %}

    G90
    G0 X0 Y210 F3000 ; park toolhead

    PRINT MSG="Aborted!"
    PLAY_LONG_FEEDBACK_SOUND

    ; PROBE_TEMPERATURE_COMPENSATION ACTION=CLEAR

    CLEAR_PAUSE
    TURN_OFF_HEATERS
    ;M84 ; disable steppers
    M107 ; fan off
    BED_MESH_CLEAR
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=1
    CANCEL_PRINT_OLD
    ; SDCARD_RESET_FILE
    ; SET_FAN_SPEED FAN=filter_fan SPEED=1.0 ; filter fan max speed
    AUTO_SAVE_CONFIG

[gcode_macro RESUME]
rename_existing: RESUME_OLD
gcode:
    G91
    G92 E0 ;Reset Extruder
    G1 E0.5 F300
    G90
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=1
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    PRINT MSG="{printer.print_stats.filename}"
    RESUME_OLD

[gcode_macro PAUSE]
rename_existing: PAUSE_OLD
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    PAUSE_OLD
    G91
    G92 E0 ;Reset Extruder
    G1 E-2 F300
    M125 ; parking
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=0
    PRINT MSG="Paused!"

# run on startup
[delayed_gcode INIT]
initial_duration: 1
gcode:
    PRINT MSG="Init..."
    ; enable auto power off on startup, idle_timeout does not trigger if the print deos not start
    UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=600
    ; set deault state of enclosure led
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=dim_enclosure_led VALUE=False
    PRINT MSG="Ready"

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
         M117 {params.MSG | string}
    {% endif %}

[gcode_macro TOGGLE_LED]
gcode:
    ; gcode variable take time to change, so use a tmp variable instead
    {% set flippedState = not(printer["gcode_macro SHARE_VARIABLES"].enable_silent_mode) %}

    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=dim_enclosure_led VALUE={ flippedState }
    {% if flippedState %}
        SET_LED LED=led RED=0.13 GREEN=0.23 BLUE=0.23
    {% else %}
        SET_LED LED=led RED=0.58 GREEN=1 BLUE=1
    {% endif %}
    PRINT MSG="Enclosure LED state changed" OUTPUT_TARGET=1

# [gcode_macro BED_MESH_CALIBRATE]
# rename_existing: BED_MESH_CALIBRATE_BASE
# ; gcode parameters
# variable_parameter_AREA_START : 0,0
# variable_parameter_AREA_END : 0,0
# ; the clearance between print area and probe area
# variable_mesh_area_offset : 5.0
# ; number of sample per probe point
# variable_probe_samples : 5
# ; minimum probe count, must be 4 or higher
# variable_min_probe_count : 5
# ; scale up the probe count, the vlaue should be 1.0 ~ < (max/min) probe count
# variable_probe_count_scale_factor : 1.25
# ; enable preference index
# variable_enable_reference_index : False
# gcode:
#     {% if params.AREA_START and params.AREA_END %}
#         {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
#         {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
#         {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
#         {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
#         {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

#         {% set area_min_x = params.AREA_START.split(",")[0]|float %}
# 		{% set area_min_y = params.AREA_START.split(",")[1]|float %}
# 		{% set area_max_x = params.AREA_END.split(",")[0]|float %}
# 		{% set area_max_y = params.AREA_END.split(",")[1]|float %}

#         {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
#             {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#             {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
#         {% else %}
#             {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#             {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
#         {% endif %}



#         {% set meshMaxPointX = meshPointX %}
# 	    {% set meshMaxPointY = meshPointY %}


#         {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
#             {% if area_min_x - mesh_area_offset >=  safe_min_x %}
#                 {% set area_min_x = area_min_x - mesh_area_offset %}
#             {% else %}
#                 {% set area_min_x = safe_min_x %}
#             {% endif %}

#             {% if area_min_y - mesh_area_offset >=  safe_min_y %}
#                 {% set area_min_y = area_min_y - mesh_area_offset %}
#             {% else %}
#                 {% set area_min_y = safe_min_y %}
#             {% endif %}

#             {% if area_max_x + mesh_area_offset <=  safe_max_x %}
#                 {% set area_max_x = area_max_x + mesh_area_offset %}
#             {% else %}
#                 {% set area_max_x = safe_max_x %}
#             {% endif %}

#             {% if area_max_y + mesh_area_offset <=  safe_max_y %}
#                 {% set area_max_y = area_max_y + mesh_area_offset %}
#             {% else %}
#                 {% set area_max_y = safe_max_y %}
#             {% endif %}

#             PRINT MSG="Set custom mesh area to ({area_min_x},{area_min_y}),({area_max_x},{area_max_y})" OUTPUT_TARGET=1

#             {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x)  * probe_count_scale_factor|float)|round(0)|int %}
#             {% if meshPointX < min_probe_count %}
#                 {% set meshPointX = min_probe_count %}
#             {% endif %}
#             {% if meshPointX > meshMaxPointX %}
#                 {% set meshPointX = meshMaxPointX %}
#             {% endif %}

#             {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor|float)|round(0)|int %}
#             {% if meshPointY < min_probe_count %}
#                 {% set meshPointY = min_probe_count %}
#             {% endif %}
#             {% if meshPointY > meshMaxPointY %}
#                 {% set meshPointY = meshMaxPointY %}
#             {% endif %}

#             {% set algorithm = "bicubic" %}
# 	        {% if "algorithm" in bedMeshConfig %}
# 	            {% set algorithm = bedMeshConfig.algorithm %}
#             {% endif %}
#             {% if meshPointX >=7 or meshPointY >=7 %}
#                 {% set algorithm = "bicubic" %}
#             {% endif %}
#             PRINT MSG="Use mesh algorithm : { algorithm }" OUTPUT_TARGET=1

#             PRINT MSG="Set custom mesh matrix to {meshPointX}x{meshPointY}" OUTPUT_TARGET=1
#             PRINT MSG="Mesh: {meshPointX}x{meshPointY}" OUTPUT_TARGET=2

#             {% if enable_reference_index %}
#                 {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
#                 BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
#             {% else %}
#                 BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
#             {% endif %}
#         {% else %}
#             PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
#             PRINT MSG="Mesh: default" OUTPUT_TARGET=2
#             BED_MESH_CALIBRATE_BASE
#         {% endif %}
#     {% else %}
#         PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
#         PRINT MSG="Mesh: default" OUTPUT_TARGET=2
#         BED_MESH_CALIBRATE_BASE
#     {% endif %}


[gcode_macro DISPLAY_GCODE_PROGRESS]
variable_parameter_TOTAL_LAYER : 0
variable_parameter_CURRENT_LAYER : 0
variable_parameter_PROGRESS : 0
variable_parameter_REMAIN : "none"
gcode:
    LAYER_PROGRESS TOTAL_LAYER={params.TOTAL_LAYER} CURRENT_LAYER={params.CURRENT_LAYER} PROGRESS={params.PROGRESS} REMAIN={params.REMAIN}

[gcode_macro LAYER_PROGRESS]
variable_parameter_TOTAL_LAYER : 0
variable_parameter_CURRENT_LAYER : 0
variable_total_layer : 0
variable_current_layer : 0
gcode:
    {% if "TOTAL_LAYER" in params %}
        SET_GCODE_VARIABLE MACRO=LAYER_PROGRESS VARIABLE=total_layer VALUE={ params.TOTAL_LAYER }
    {% else %}
        SET_GCODE_VARIABLE MACRO=LAYER_PROGRESS VARIABLE=total_layer VALUE=0
    {% endif %}

    {% if "CURRENT_LAYER" in params %}
        SET_GCODE_VARIABLE MACRO=LAYER_PROGRESS VARIABLE=current_layer VALUE={ params.CURRENT_LAYER }
    {% else %}
        SET_GCODE_VARIABLE MACRO=LAYER_PROGRESS VARIABLE=current_layer VALUE=0
    {% endif %}



[gcode_macro FILAMENT_PROFILE]
variable_parameter_FILAMENT_TYPE : "PLA"
description: Set current printing filament parameters
gcode:
  {% if params.FILAMENT_TYPE|default("DEFAULT") == "PLA" %}
    PRINT MSG="Set filament profile : PLA" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05
    ;SET_FAN_SPEED FAN=filter_fan SPEED=0.1
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PETG" %}
    PRINT MSG="Set filament profile : PETG" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.08
    ;SET_FAN_SPEED FAN=filter_fan SPEED=0.75
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "ABS" %}
    PRINT MSG="Set filament profile : ABS" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    ;SET_FAN_SPEED FAN=filter_fan SPEED=0.3
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "ASA" %}
    PRINT MSG="Set filament profile : ASA" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    ;SET_FAN_SPEED FAN=filter_fan SPEED=0.25
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PC" %}
    PRINT MSG="Set filament profile : PC" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.067
    ;SET_FAN_SPEED FAN=filter_fan SPEED=0.0
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PC_CF" %}
    PRINT MSG="Set filament profile : PC_CF" OUTPUT_TARGET=1
    M221 S102 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    ;SET_FAN_SPEED FAN=filter_fan SPEED=0.25
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "TEST" %}
    PRINT MSG="Set filament profile : TEST" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05
    ;SET_FAN_SPEED FAN=filter_fan SPEED=1.0
  {% else %}
    PRINT MSG="Set filament profile : Default" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.00
    ;SET_FAN_SPEED FAN=filter_fan SPEED=1.0
  {% endif %}

[gcode_macro AUTO_SAVE_CONFIG]
description: Save and restart
gcode:
    UPDATE_DELAYED_GCODE ID=DELAY_SAVE_CONFIG DURATION=1

[delayed_gcode DELAY_SAVE_CONFIG]
initial_duration: 0.
gcode:
    {% if printer["gcode_macro SHARE_VARIABLES"].enable_save_config %}
        Z_OFFSET_APPLY_PROBE
        PRINT MSG="Printer will restart and save current configs..." OUTPUT_TARGET=1
        PRINT MSG="Saving..." OUTPUT_TARGET=0
        SAVE_CONFIG
    {% endif %}

[gcode_macro ENABLE_SAVE_CONFIG]
gcode:
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_save_config VALUE=True

[gcode_macro DISABLE_SAVE_CONFIG]
gcode:
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_save_config VALUE=False

[delayed_gcode POWER_DOWN]
initial_duration: 0.
gcode:
    {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
        {% if printer.extruder.temperature < 50 and printer["gcode_macro HEAT_SOAK"].remain_time == 0 %}
            M84 ; disable steppers
            TURN_OFF_HEATERS
            M107 ; turn off fans
            ;SET_FAN_SPEED FAN=filter_fan SPEED=0.0 ; turn off filter fan
            ;SET_FAN_SPEED FAN=bed_fan SPEED=0.0 ; turn off filter fan
            PRINT MSG="Power down."  OUTPUT_TARGET=0
            {action_call_remote_method("set_device_power", device="PSU", state="off")} ; use sonoff to power down
        {% else %}
            TURN_OFF_HEATERS
            M107 ; turn off fans
            ;SET_FAN_SPEED FAN=filter_fan SPEED=0.0 ; turn off filter fan
            ;SET_FAN_SPEED FAN=bed_fan SPEED=0.0 ; turn off filter fan
            UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=300 ; extruder still too hot, wait extra 5 mins
        {% endif %}
    {% endif %}

[gcode_macro FORCE_MOVE_BED]
variable_parameter_DISTANCE: -10
gcode:
    SET_KINEMATIC_POSITION Z=100 ; fake position
    G91 ; Relative positioning
    G0 Z{params.DISTANCE|default(-10)|float}
    G90 ; Absolute positioning
    # M84 ; disable steppers, this will clear current position

[gcode_macro DUMP_VARS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
        {% if (name1 != "configfile") and (name1 != "bed_mesh" and name2!="mesh_matrix") and (name1 != "mcu" and name2!="mcu_constants") and (name1 != "mcu" and name2!="last_stats") and (name2 != "color_data") and (andm1 != "gcode_macro") %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
        {% else %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, "...")) }
        {% endif %}
      {% endfor %}
   {% endfor %}

[gcode_macro SET_AUX_FAN]
variable_parameter_LEVEL : "OFF"
description: SET_AUX_FAN [LEVEL={OFF|LOW|MID|HIGH|MAX}]
gcode:
    {% if "LEVEL" in params %}
        {% set level = params.LEVEL|lower %}
        {% if level  == "off" %}
            SET_FAN_SPEED FAN=aux_fan SPEED=0.00
        {% elif level  == "low" %}
            SET_FAN_SPEED FAN=aux_fan SPEED=0.50
        {% elif level  == "mid" %}
            SET_FAN_SPEED FAN=aux_fan SPEED=0.65
        {% elif level  == "high" %}
            SET_FAN_SPEED FAN=aux_fan SPEED=0.80
        {% elif level  == "max" %}
            SET_FAN_SPEED FAN=aux_fan SPEED=1.00
        {% endif %}
    {% else %}
        SET_FAN_SPEED FAN=aux_fan SPEED=0.00
    {% endif %}

[gcode_macro HEAT_SOAK]
description: HEAT_SOAK [ACTION={start|stop|query}] DURATION={30} BED_TEMP={110}
variable_parameter_DURATION : 30
variable_parameter_ACTION : "start"
variable_parameter_BED_TEMP : 110
variable_remain_time : 0
variable_bed_temp: 0
gcode:
    {% set action = params.ACTION|default("start")|lower %}
    {% if action  == "start" %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE={params.DURATION|default(60)|int}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE={params.BED_TEMP|default(110)|int}
        G28
        G90
        G0 X90 Y90 F3000
        G0 Z100 F1000
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|default(110)|int}
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=1
    {% elif action  == "stop" %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
    {% elif action  == "query" %}
        {% if remain_time > 0 %}
            PRINT MSG="Heat soak : running. Remain time {remain_time} , Bed temp : {printer.heater_bed.temperature}/{bed_temp}, Chanber temp : {printer['temperature_sensor chamber'].temperature}" OUTPUT_TARGET=1
        {% else %}
            PRINT MSG="Heat soak : stopped." OUTPUT_TARGET=1
        {% endif %}
    {% else %}
        PRINT MSG="Heat soak : Invalid action!, the current HEAT_SOAK task will be canceled." OUTPUT_TARGET=1
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
    {% endif %}

[delayed_gcode HEAT_SOAK_THREAD]
initial_duration: 0.
gcode:
    {% if printer["gcode_macro HEAT_SOAK"].remain_time > 0 %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printer["gcode_macro HEAT_SOAK"].bed_temp}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE={printer["gcode_macro HEAT_SOAK"].remain_time -1}
        PRINT MSG="Heat soak({printer["gcode_macro HEAT_SOAK"].remain_time}m)" OUTPUT_TARGET=0
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=60
    {% else %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        PRINT MSG="Heat soak ended! Chanber temp : {printer['temperature_sensor chamber'].temperature}" OUTPUT_TARGET=1
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
    {% endif %}

[gcode_macro M486]
gcode:
    CLEAR_PAUSE

[gcode_macro G80]
gcode:
    M117 Bed leveling
    BED_MESH_CALIBRATE
    G1 X0 Y0 Z0.4 F4000
    M117
    M400

[gcode_macro G81]
gcode:
 BED_MESH_OUTPUT

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro UNLOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M109 S{params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  G92 E0.0
  G91
  G1 E-45 F5000
  G1 E-15 F1000
  G1 E-20 F1000
  G90
  G92 E0.0
  M400
  M117 Remove Filament Now!
  M300 S300 P1000
  M117 Filament unloaded!
  RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
  M117 Heating...
  M109 S{params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G92 E0.0
  G91
  G1 E70 F400
  G1 E40 F100
  G90
  G92 E0.0
  M400
  M117 Filament loaded!
  RESTORE_GCODE_STATE NAME=load_state

[delayed_gcode clear_display]
initial_duration: 0.
gcode:
  M117

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  SDCARD_RESET_FILE
  # Raise nozzle by 60mm
  G1 Z60 F3000
  G90
  # Disable steppers
  M84

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}
  CLEAR_PAUSE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# Prusa's calibrate Z
[gcode_macro Calibrate_Z]
description: Calibrate Z axis, like Prusa Tram Z
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    G1 X20 Y0
    G1 Z{max_z-10} F2000 #Update with Z height.
    FORCE_MOVE STEPPER=stepper_z Distance=20 Velocity=10
    G1 Z{max_z-50} F2000 # Move down
    G28 # Home again

[gcode_macro PREHEAT_PLA]
gcode:
    # Start bed heating
    M140 S60
    # Start nozzle heating
    M104 S200

[gcode_macro PREHEAT_PETG]
gcode:
    # Start bed heating
    M140 S90
    # Start nozzle heating
    M104 S240

[gcode_macro PREHEAT_TPU]
gcode:
    # Start bed heating
    M140 S50
    # Start nozzle heating
    M104 S190

# Color Change
[gcode_macro M600]
description: Color change
gcode:
    {% set X = params.X|default(0)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    G1 Y5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
    RESTORE_GCODE_STATE NAME=PARKBED

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}

    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}

    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}

        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED

    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %}
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}

        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}

        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}

        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED